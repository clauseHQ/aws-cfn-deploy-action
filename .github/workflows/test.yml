name: test

on:
  push:
    branches:
      - master

jobs:
  test-validation-failure:
    name: Test validation failure

    runs-on: ubuntu-latest

    steps:
      - name: git checkout
        uses: actions/checkout@v2

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: custom action
        id: deploy
        uses: ./
        with:
          template: cfn-template-fail-validation.yml
          stack-name: aws-cfn-deploy-action-test
          parameters: Environment=Dev
          never-fail: true
          debug: true

      - name: check results
        run: |
          echo "stack-status: ${{ steps.deploy.outputs.stack-status }}"
          echo "message: ${{ steps.deploy.outputs.message }}"
          if [ "${{ steps.deploy.outputs.stack-status }}" != "" ]; then
            exit 1
          fi
          if [ "${{ steps.deploy.outputs.message }}" != "Template format error: Unresolved resource dependencies [NonExistingParameter] in the Resources block of the template" ]; then
            exit 1
          fi

  test-deployment-failure:
    needs:
      - test-validation-failure

    name: Test deployment failure

    runs-on: ubuntu-latest

    steps:
      - name: git checkout
        uses: actions/checkout@v2

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: custom action
        id: deploy
        uses: ./
        with:
          template: cfn-template-fail-deploy.yml
          stack-name: aws-cfn-deploy-action-test
          parameters: Environment=Dev
          never-fail: true
          debug: true

      - name: check results
        run: |
          echo "stack-status: ${{ steps.deploy.outputs.stack-status }}"
          echo "message: ${{ steps.deploy.outputs.message }}"
          if [ "${{ steps.deploy.outputs.stack-status }}" != "ROLLBACK_COMPLETE" ]; then
            exit 1
          fi
          if [ "${{ steps.deploy.outputs.message }}" != "Stack aws-cfn-deploy-action-test deployment failed" ]; then
            exit 1
          fi

  test-success:
    needs:
      - test-deployment-failure

    name: Test successful deployment

    runs-on: ubuntu-latest

    steps:
      - name: git checkout
        uses: actions/checkout@v2

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: custom action
        id: deploy
        uses: ./
        with:
          template: cfn-template-ok.yml
          stack-name: aws-cfn-deploy-action-test
          parameters: Environment=Dev
          debug: true

      - name: check results
        run: |
          echo "stack-status: ${{ steps.deploy.outputs.stack-status }}"
          echo "message: ${{ steps.deploy.outputs.message }}"
          if [ "${{ steps.deploy.outputs.stack-status }}" != "CREATE_COMPLETE" ]; then
            exit 1
          fi
          if [ "${{ steps.deploy.outputs.message }}" != "" ]; then
            exit 1
          fi

  test-update-failure:
    needs:
      - test-success

    name: Test update failure

    runs-on: ubuntu-latest

    steps:
      - name: git checkout
        uses: actions/checkout@v2

      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: custom action
        id: deploy
        uses: ./
        with:
          template: cfn-template-fail-deploy.yml
          stack-name: aws-cfn-deploy-action-test
          parameters: Environment=Dev
          never-fail: true
          debug: true

      - name: check results
        run: |
          echo "stack-status: ${{ steps.deploy.outputs.stack-status }}"
          echo "message: ${{ steps.deploy.outputs.message }}"
          if [ "${{ steps.deploy.outputs.stack-status }}" != "UPDATE_ROLLBACK_COMPLETE" ]; then
            exit 1
          fi
          if [ "${{ steps.deploy.outputs.message }}" != "Stack aws-cfn-deploy-action-test deployment failed" ]; then
            exit 1
          fi

  clean:
    if: always()

    needs:
      - test-update-failure

    name: Delete stack

    runs-on: ubuntu-latest

    steps:
      - name: aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: delete stack
        run: |
          aws cloudformation wait stack-update-complete --stack-name aws-cfn-deploy-action-test | true
          aws cloudformation delete-stack --stack-name aws-cfn-deploy-action-test

  notify:
    name: Notify User of Failure (Slack)

    if: failure()

    runs-on: ubuntu-latest

    steps:
      - name: Github job status to slack text
        id: github-job-status-to-slack-text
        run: |
          echo "::set-output name=slack-text::Release to Production Failed :scream:"
          echo "::set-output name=jobs-status::Failure"

      - name: GitHub actor to slack id
        id: slack
        run: |
          SLACK_ID="$(curl -s -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -H 'Content-Type: application/json' -H 'X-Auth-Repository: ${{ needs.release.outputs.repository-name }}' https://svc-usermaps.clause.io/users/byGithubName/${{ github.actor }}/slack | sed -e 's/"//g')"
          echo "::set-output name=id::${SLACK_ID}"

      - name: Notify to Slack
        uses: 8398a7/action-slack@v3
        with:
          text: ${{ steps.github-job-status-to-slack-text.outputs.slack-text }}
          status: ${{ steps.github-job-status-to-slack-text.outputs.jobs-status }}
          if_mention: Always
          mention: ${{ steps.slack.outputs.id }}
          fields: repo,message,action
          author_name: ${{ needs.release.outputs.repository-name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
